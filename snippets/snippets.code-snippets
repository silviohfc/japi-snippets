{
  "Create JS require": {
    "prefix": "jReq",
    "body": [
      "const ${1:MyFunction} = require('${0:path}');"
    ],
    "description": "Create JS require"
  },

	"Create Jest description body": {
    "prefix": "jDesc",
    "body": [
      "describe('$1', () => {",
      "  $0",
      "});"
    ],
    "description": "Create Jest description body"
  },
  
  "Create Jest it body": {
    "prefix": "jIt",
    "body": [
      "it('should $1', () => {",
      "  const { sut } = makeSut();",
      "  $0",
      "});"
    ],
    "description": "Create Jest it body"
  },

  "Create Jest async it body": {
    "prefix": "jItAsync",
    "body": [
      "it('should $1', async () => {",
      "  const { sut } = makeSut();",
      "  $0",
      "});"
    ],
    "description": "Create Jest async it body"
  },

  "Create Jest test body": {
    "prefix": "jTest",
    "body": [
      "test('should $1', () => {",
      "  const { sut } = makeSut();",
      "  $0",
      "});"
    ],
    "description": "Create Jest test body"
  },

  "Create Jest async test body": {
    "prefix": "jTestAsync",
    "body": [
      "test('should $1', async () => {",
      "  const { sut } = makeSut();",
      "  $0",
      "});"
    ],
    "description": "Create Jest async test body"
  },

  "Create Jest mock": {
    "prefix": "jMock",
    "body": [
      "jest.mock('${0:path}');"
    ],
    "description": "Create Jest mock"
  },

  "Create Jest Mock with spyOn and MockImplementation": {
    "prefix": "jMockSpy",
    "body": [
      "jest.mock('${1:path}');",
      "jest.spyOn(${2:MyClass}, '${3:myMethod}').mockImplementation(() => {",
      "  ${0:return 'Hello World!'}",
      "});"
    ],
    "description": "Create Jest Mock with spyOn and MockImplementation"
  },

  "Create Jest spyOn": {
		"prefix": "jSpy",
		"body": [
			"jest.spyOn(${1:MyClass}, '${0:myMethod}');",
		],
		"description": "Create Jest spyOn"
  },

  "Create Jest spyOn with mockImplementation": {
		"prefix": "jSpyImp",
		"body": [
			"jest.spyOn(${1:MyClass}, '${2:myMethod}').mockImplementation(() => {",
      "  ${0:return 'Hello World!'}",
      "});"
		],
		"description": "Create Jest spyOn with mockImplementation"
  },

  "Create Jest spyOn with mockImplementationOnce": {
		"prefix": "jSpyImpOnce",
		"body": [
			"jest.spyOn(${1:MyClass}, '${2:myMethod}').mockImplementationOnce(() => {",
      "  ${0:return 'Hello World!'}",
      "});"
		],
		"description": "Create Jest spyOn with mockImplementationOnce"
  },

  "Create Jest spyOn with mockReturnValue": {
		"prefix": "jSpyRet",
		"body": [
			"jest.spyOn(${1:MyClass}, '${2:myMethod}').mockReturnValue(true);",
		],
		"description": "Create Jest spyOn with mockReturnValue"
  },

  "Create Jest spyOn with mockReturnValueOnce": {
		"prefix": "jSpyRetOnce",
		"body": [
			"jest.spyOn(${1:MyClass}, '${2:myMethod}').mockReturnValueOnce(true);",
		],
		"description": "Create Jest spyOn with mockReturnValueOnce"
  },

  "Create makeSut factory": {
    "prefix": "jMakeSut",
    "body": [
      "function makeSut() {",
      "  const sut = new ${0:MyClass()};",
      "  return { sut };",
      "}"
    ],
    "description": "Create makeSut factory"
  },

  "Declare System Under Test variable (SUT)": {
		"prefix": "jSut",
		"body": [
			"const sut = makeSut();"
		],
		"description": "Declare System Under Test variable (SUT)"
  },
}