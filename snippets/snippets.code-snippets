{
	"Jest common test body": {
		"prefix": "jDesc",
		"body": [
			"describe('Testing ${1:MyAPI}', () => {",
			"\tit('should $2', () => {",
			"\t\tconst { sut } = makeSut()$0",
			"\t})",
			"})"
		],
		"description": "Create Jest description body"
  },
  
  "Jest async common test body": {
		"prefix": "jDescAsync",
		"body": [
			"describe('Testing ${1:MyAPI}', () => {",
      "\tit('should $2', async () => {",
      "\t\tconst { sut } = makeSut()$0",
      "\t})",
      "})"
		],
		"description": "Create async Jest description body"
  },
  
  "Jest single test body": {
		"prefix": "jTest",
		"body": [
      "it('should $1', () => {",
      "\tconst { sut } = makeSut()$0",
      "})",
		],
		"description": "Create Jest test body"
  },

  "Jest single async test body": {
		"prefix": "jTestAsync",
		"body": [
      "it('should $1', async () => {",
      "\tconst { sut } = makeSut()$0",
      "})",
		],
		"description": "Create Jest async test body"
  },

  "Jest API test template": {
		"prefix": "jApi",
		"body": [
      "const makeSut = () => {",
      "\tconst sut = ${1|new MyClass(),myController()|}",
      "\treturn { sut }",
      "}",
      "",
      "describe('Testing ${0:MyAPI}', () => {",
      "\tit('should return 400 if <param name> is missing', () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "\tit('should call <function name> with correct values', () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "\tit('should return 500 if <function name> throws', () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "\tit('should return 200 if success', () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "})"
		],
		"description": "Create Jest API with common tests template"
  },

  "Jest API async test template": {
		"prefix": "jApiAsync",
		"body": [
      "const makeSut = () => {",
      "\tconst sut = ${1|new MyClass(),myController()|}",
      "\treturn { sut }",
      "}",
      "",
      "describe('Testing ${0:MyAPI}', () => {",
      "\tit('should return 400 if <param name> is missing', async () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "\tit('should call <function name> with correct values', async () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "\tit('should return 500 if <function name> throws', async () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "\tit('should return 200 if success', async () => {",
      "\t\tconst { sut } = makeSut()",
      "\t})",
      "})"
		],
		"description": "Create Jest API with common async tests template"
  },

  "Jest mock template": {
		"prefix": "jMock",
		"body": [
			"jest.mock('${0:Path}')",
		],
		"description": "Create Jest mock function"
  },

  "Jest mock with spyOn template": {
		"prefix": "jMockSpy",
		"body": [
			"jest.mock('${1:Path}')",
			"jest.spyOn(${2:Object}, '${3:Function}').mockImplementation({",
			"\t$0",
			"})",
		],
		"description": "Create Jest mock with spyOn function"
  },

  "Jest spyOn template": {
		"prefix": "jSpy",
		"body": [
			"jest.spyOn(${1:Object}, '${0:Function}')",
		],
		"description": "Create Jest spyOn function"
  },

  "Jest spyOn with mockImplementation": {
		"prefix": "jSpyImp",
		"body": [
			"jest.spyOn(${1:Object}, '${2:Function}').mockImplementation({",
			"\t$0",
			"})",
		],
		"description": "Create Jest spyOn with mockImplementation function"
  },

  "Jest spyOn with mockImplementationOnce": {
		"prefix": "jSpyImpOnce",
		"body": [
			"jest.spyOn(${1:Object}, '${2:Function}').mockImplementationOnce({",
			"\t$0",
			"})",
		],
		"description": "Create Jest spyOn with mockImplementationOnce function"
  },

  "Jest makeSut function": {
		"prefix": "jMakeSut",
		"body": [
			"const makeSut = () => {",
      "\tconst sut = ${1|new MyClass(),myController()|}",
      "\treturn { sut }",
      "}",
		],
		"description": "Create sut factory makeSut()"
  },

  "Jest declare sut": {
		"prefix": "jSut",
		"body": [
			"const sut = makeSut()"
		],
		"description": "Create sut declaration"
  },

  "Var": {
		"prefix": "var",
		"body": [
			"const sut = ${1|new MyClass(),myController()|}"
		],
		"description": "Create sut declaration"
  },
}